import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

def sigmoid_func(x, L, k, x0, C):
    return L / (1 + np.exp(k * (x - x0))) + C

x = np.arange(28)

import numpy as np

# Similarity = 0.2
y_2 = np.array([
    0.320860943, 0.32129385, 0.322409905, 0.321161108, 0.318951274, 0.315798872,
    0.312785399, 0.306693793, 0.297570483, 0.291373631, 0.280714576, 0.268122765,
    0.2578367, 0.248976017, 0.234292591, 0.220534577, 0.204962232, 0.184290955,
    0.165950833, 0.144656073, 0.126221779, 0.112555051, 0.098923391, 0.089782629,
    0.085720895, 0.081597059, 0.078886376, 0.078088521
])

# Similarity = 0.3
y_3 = np.array([
    0.320668567, 0.320871669, 0.321305847, 0.319605001, 0.317609342, 0.314785955,
    0.311781069, 0.306304382, 0.298346677, 0.291687967, 0.282814358, 0.270888043,
    0.260821949, 0.25127296, 0.237694532, 0.224551699, 0.210721897, 0.190196454,
    0.174473203, 0.154260066, 0.136817846, 0.124461408, 0.111723171, 0.10283554,
    0.097275795, 0.094207979, 0.092161101, 0.089987616
])

# Similarity = 0.4
y_4 = np.array([
    0.316901206, 0.316817277, 0.316336935, 0.313330577, 0.313114249, 0.310792673,
    0.308716265, 0.302323377, 0.297024611, 0.290880366, 0.284445227, 0.274676815,
    0.265241868, 0.256622543, 0.245433674, 0.234344719, 0.223254492, 0.206125847,
    0.191837209, 0.179006538, 0.163897017, 0.153184358, 0.142815181, 0.133416571,
    0.127706019, 0.125418764, 0.123764585, 0.121506243
])

# Similarity = 0.5
y_5 = np.array([
    0.317909503, 0.316969777, 0.316735317, 0.31393269, 0.312816149, 0.310361384,
    0.307615477, 0.30227751, 0.298089234, 0.293337193, 0.28841842, 0.279337768,
    0.272487608, 0.264496149, 0.256434396, 0.246803892, 0.237879801, 0.224506289,
    0.21620398, 0.203268823, 0.191133443, 0.183084117, 0.173851208, 0.166495304,
    0.160796619, 0.158237893, 0.156996335, 0.15426189
])

# Similarity = 0.6
y_6 = np.array([
    0.318672076, 0.317971726, 0.318931742, 0.315177619, 0.31416496, 0.311363027,
    0.308231067, 0.303654222, 0.300915478, 0.296457653, 0.292086166, 0.285142161,
    0.281001385, 0.275987014, 0.268289755, 0.261520516, 0.25306768, 0.244029987,
    0.237250291, 0.228621906, 0.218529659, 0.211479111, 0.204750607, 0.197617895,
    0.194796603, 0.191816507, 0.190876833, 0.188468037
])

# Similarity = 0.7
y_7 = np.array([
    0.319411416, 0.319808316, 0.319443456, 0.317071989, 0.315392561, 0.311348028,
    0.309563601, 0.30837074, 0.301920957, 0.299281897, 0.295988055, 0.29032363,
    0.287408881, 0.281799971, 0.276777485, 0.270814245, 0.264529999, 0.257798642,
    0.254412697, 0.247396439, 0.236531319, 0.235498771, 0.224754392, 0.222368173,
    0.218581237, 0.218579617, 0.213062389, 0.214378091
])

# Fitting
y = y_7
initial_guess = [0.1, 0.1, 0.1, 0.1]
params, covariance = curve_fit(sigmoid_func, x, y, p0=initial_guess, maxfev=1000000)
L, k, x0, C = params
y_fit = sigmoid_func(x, *params)

print(L, k ,x0, C)

# Get Fitting Function for Origin Drawing
x_new = np.arange(min(x), 27.01, 0.03)
y_new = sigmoid_func(x_new, L, k, x0, C)
y_new_str = ["{:.6f}".format(y) for y in y_new]
# for x_val, y_val in zip(x_new, y_new_str):
    # print(f"{x_val:.2f}, {y_val}")
    # print(f"{x_val:.2f}")
    # print(f"{y_val}")

# Plot
plt.scatter(x, y)
plt.plot(x, y_fit, 'r-', label='Fitted Curve')
plt.legend()
plt.xlabel('x')
plt.ylabel('y')
plt.show()

print(L, k ,x0, C)
